{
  "version": 3,
  "sources": ["<stdin>", "../../app/entry.server.tsx", "../../app/root.tsx", "../../app/routes/countries.$code.tsx", "../../app/graphql/getCountryByCode.ts", "../../app/lib/graphql-client.ts", "../../app/routes/_index.tsx", "../../app/graphql/getCountries.ts", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["export * from \"@remix-run/dev/server-build\";", "/**\n * By default, Remix will handle generating the HTTP Response for you.\n * You are free to delete this file if you'd like to, but if you ever want it revealed again, you can run `npx remix reveal` \u2728\n * For more information, see https://remix.run/docs/en/main/file-conventions/entry.server\n */\n\nimport { Response } from '@remix-run/node';\nimport { RemixServer } from '@remix-run/react';\nimport isbot from 'isbot';\nimport { renderToPipeableStream } from 'react-dom/server';\nimport { PassThrough } from 'node:stream';\nimport type { EntryContext } from '@remix-run/node';\n\nconst ABORT_DELAY = 5_000;\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext,\n) {\n  return isbot(request.headers.get('user-agent'))\n    ? handleBotRequest(request, responseStatusCode, responseHeaders, remixContext)\n    : handleBrowserRequest(request, responseStatusCode, responseHeaders, remixContext);\n}\n\nfunction handleBotRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext,\n) {\n  return new Promise((resolve, reject) => {\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer context={remixContext} url={request.url} abortDelay={ABORT_DELAY} />,\n      {\n        onAllReady() {\n          const body = new PassThrough();\n\n          responseHeaders.set('Content-Type', 'text/html');\n\n          resolve(\n            new Response(body, {\n              headers: responseHeaders,\n              status: responseStatusCode,\n            }),\n          );\n\n          pipe(body);\n        },\n        onShellError(error: unknown) {\n          reject(error);\n        },\n        onError(error: unknown) {\n          responseStatusCode = 500;\n          console.error(error);\n        },\n      },\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n\nfunction handleBrowserRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext,\n) {\n  return new Promise((resolve, reject) => {\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer context={remixContext} url={request.url} abortDelay={ABORT_DELAY} />,\n      {\n        onShellReady() {\n          const body = new PassThrough();\n\n          responseHeaders.set('Content-Type', 'text/html');\n\n          resolve(\n            new Response(body, {\n              headers: responseHeaders,\n              status: responseStatusCode,\n            }),\n          );\n\n          pipe(body);\n        },\n        onShellError(error: unknown) {\n          reject(error);\n        },\n        onError(error: unknown) {\n          console.error(error);\n          responseStatusCode = 500;\n        },\n      },\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n", "import { json } from '@remix-run/node';\nimport { Links, LiveReload, Meta, Outlet, Scripts, ScrollRestoration, useLoaderData } from '@remix-run/react';\nimport stylesheet from '~/tailwind.css';\nimport type { LinksFunction } from '@remix-run/node';\n\nexport const links: LinksFunction = () => [{ rel: 'stylesheet', href: stylesheet }];\n\nexport const loader = async () => {\n  return json({\n    ENV: {\n      MAIN_SERVICE_BASE_URL: process.env.MAIN_SERVICE_BASE_URL,\n    },\n  });\n};\n\nexport default function App() {\n  const data = useLoaderData<typeof loader>();\n\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <script\n          dangerouslySetInnerHTML={{\n            __html: `window.ENV = ${JSON.stringify(data.ENV)}`,\n          }}\n        />\n        <Outlet />\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n", "import { json, redirect } from '@remix-run/node';\nimport { useLoaderData } from '@remix-run/react';\nimport { GetCountryByCode } from '~/graphql/getCountryByCode';\nimport { client } from '~/lib/graphql-client';\nimport type { ActionFunction, LoaderFunction } from '@remix-run/node';\nimport type { GetCountryByCodeResponse, GetCountryByCodeVariables } from '~/graphql/getCountryByCode';\n\ntype PageProps = GetCountryByCodeResponse | null;\n\nexport const loader: LoaderFunction = async ({ params }) => {\n  const { code } = params;\n\n  if (code) {\n    const { country } = await client.request<GetCountryByCodeResponse, GetCountryByCodeVariables>(GetCountryByCode, {\n      code,\n    });\n    return json<PageProps>({ country });\n  } else {\n    return json<PageProps>(null);\n  }\n};\n\nexport const action: ActionFunction = async ({ request }) => {\n  const formData = await request.formData();\n  const code = formData.get('code');\n  redirect(`/countries/${code}`);\n};\n\nexport default function CountryPage() {\n  const data = useLoaderData<PageProps>();\n\n  return (\n    <>\n      <form method=\"post\" action={`/countries/${data?.country.code}`}>\n        <label>\n          <input name=\"code\" type=\"text\" placeholder=\"Country code\" />\n        </label>\n        <button type=\"submit\">Go</button>\n      </form>\n      <pre>{JSON.stringify(data?.country, null, 2)}</pre>\n    </>\n  );\n}\n", "import { gql } from 'graphql-request';\nimport type { Variables } from 'graphql-request';\n\nexport const GetCountryByCode = gql`\n  query GetCountryByCode($code: ID!) {\n    country(code: $code) {\n      name\n      code\n      capital\n      currency\n    }\n  }\n`;\n\nexport interface GetCountryByCodeVariables extends Variables {\n  code: string;\n}\n\nexport interface GetCountryByCodeResponse {\n  country: {\n    name: string;\n    code: string;\n    capital: string;\n    currency: string;\n  };\n}\n", "import { GraphQLClient } from 'graphql-request';\n\nexport const client = new GraphQLClient('http://countries.trevorblades.com');\n", "import { json } from '@remix-run/node';\nimport { Link, useLoaderData } from '@remix-run/react';\nimport { GetAllCountries } from '~/graphql/getCountries';\nimport { client } from '~/lib/graphql-client';\nimport type { V2_MetaFunction, LoaderFunction } from '@remix-run/node';\nimport type { GetAllCountriesResponse } from '~/graphql/getCountries';\n\ntype PageProps = GetAllCountriesResponse;\n\nexport const loader: LoaderFunction = async () => {\n  const { countries } = await client.request<PageProps>(GetAllCountries);\n\n  return json<PageProps>({ countries });\n};\n\nexport const meta: V2_MetaFunction = () => {\n  return [{ title: 'New Remix App' }];\n};\n\nexport default function Index() {\n  const { countries } = useLoaderData<PageProps>();\n  const func = async () => {\n    const response = await window.versions.ping();\n    console.log(response); // prints out 'pong'\n  };\n  return (\n    <div>\n      <h1 onClick={func}>Remix + GraphQL!</h1>\n      <button className=\"bg-slate-300 px-4 py-2\">Load</button>\n      <ul>\n        {countries.map(({ code, name }) => (\n          <li key={code}>\n            <Link to={`/countries/${code}`} prefetch=\"intent\">\n              Link: {name}\n            </Link>\n            <button onClick={() => window.open(`/countries/${code}`)}>Button open: {name}</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n", "import { gql } from 'graphql-request';\n\nexport const GetAllCountries = gql`\n  {\n    countries {\n      name\n      code\n    }\n  }\n`;\n\ninterface Country {\n  name: string;\n  code: string;\n}\n\nexport interface GetAllCountriesResponse {\n  countries: Country[];\n}\n", "export default {'version':'8ed4fa47','entry':{'module':'/build/entry.client-QS5YN5QW.js','imports':['/build/_shared/chunk-A3MQEAS6.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-NFZCBFRU.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/_index':{'id':'routes/_index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/_index-JNXJOG6M.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/countries.$code':{'id':'routes/countries.$code','parentId':'root','path':'countries/:code','index':undefined,'caseSensitive':undefined,'module':'/build/routes/countries.$code-67EVHGUF.js','imports':undefined,'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false}},'cssBundleHref':undefined,'hmr':undefined,'url':'/build/manifest-8ED4FA47.js'};", "\nimport * as entryServer from \"/Volumes/Data/TUONG/RESEARCHING/REMIXJS/remix-learning/app/entry.server.tsx\";\nimport * as route0 from \"./root.tsx\";\nimport * as route1 from \"./routes/countries.$code.tsx\";\nimport * as route2 from \"./routes/_index.tsx\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const assetsBuildDirectory = \"public/build\";\n  export const future = {\"unstable_cssModules\":false,\"unstable_cssSideEffectImports\":false,\"unstable_dev\":false,\"unstable_postcss\":false,\"unstable_tailwind\":true,\"unstable_vanillaExtract\":false,\"v2_errorBoundary\":true,\"v2_meta\":true,\"v2_normalizeFormMethod\":true,\"v2_routeConvention\":true};\n  export const publicPath = \"/build/\";\n  export const entry = { module: entryServer };\n  \n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/countries.$code\": {\n      id: \"routes/countries.$code\",\n      parentId: \"root\",\n      path: \"countries/:code\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/_index\": {\n      id: \"routes/_index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route2\n    }\n  };"],
  "mappings": "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",
  "names": ["isbot", "import_node", "import_react", "import_jsx_dev_runtime", "loader", "import_node", "import_react", "import_graphql_request", "import_jsx_dev_runtime", "loader", "loader", "import_node", "import_react", "import_graphql_request", "import_jsx_dev_runtime", "loader"]
}
